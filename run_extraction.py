{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e39a137b-7a39-4f95-b9d7-38477c13c3a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "def extract_and_save_article(url, url_id, save_directory):\n",
    "    \"\"\"\n",
    "    Extracts the title and text from a URL and saves it to a text file.\n",
    "    \n",
    "    Args:\n",
    "        url (str): The URL of the article to scrape.\n",
    "        url_id (str): The unique ID for the URL, used for the filename.\n",
    "        save_directory (str): The folder where the text file will be saved.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        # Define headers to mimic a real browser visit\n",
    "        headers = {\n",
    "            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n",
    "        }\n",
    "        \n",
    "        # Fetch the webpage content\n",
    "        response = requests.get(url, headers=headers)\n",
    "        response.raise_for_status() # Raise an error for bad responses (e.g., 404)\n",
    "\n",
    "        # Parse the HTML\n",
    "        soup = BeautifulSoup(response.content, 'html.parser')\n",
    "\n",
    "        # Find the article title using its specific class\n",
    "        title_element = soup.find('h1', class_='entry-title')\n",
    "        title_text = title_element.get_text(strip=True) if title_element else \"Title Not Found\"\n",
    "\n",
    "        # Find the article's main content container\n",
    "        article_body_element = soup.find('div', class_='td-post-content')\n",
    "\n",
    "        # Safely extract the text, providing a default if not found\n",
    "        if article_body_element:\n",
    "            article_text = article_body_element.get_text(separator='\\n', strip=True)\n",
    "        else:\n",
    "            article_text = \"Article content not found.\"\n",
    "\n",
    "        # Combine title and article text as per the objective\n",
    "        final_text_to_save = f\"{title_text}\\n\\n{article_text}\"\n",
    "\n",
    "        # Create the full file path and save the content\n",
    "        file_path = os.path.join(save_directory, f\"{url_id}.txt\")\n",
    "        with open(file_path, 'w', encoding='utf-8') as f:\n",
    "            f.write(final_text_to_save)\n",
    "        \n",
    "        # Return True for success\n",
    "        return True\n",
    "\n",
    "    except requests.exceptions.RequestException:\n",
    "        # If there's a network error, we'll note it\n",
    "        return False\n",
    "    except Exception:\n",
    "        # For any other errors during scraping\n",
    "        return False\n",
    "\n",
    "# --- Main Execution Block ---\n",
    "\n",
    "# 1. Define file paths and settings\n",
    "input_file_path = r\"C:\\Users\\Admin\\Desktop\\BLACKCOFFER\\Input.xlsx\"\n",
    "output_folder = \"extracted_articles\"\n",
    "\n",
    "# 2. Create the output folder if it doesn't already exist\n",
    "if not os.path.exists(output_folder):\n",
    "    os.makedirs(output_folder)\n",
    "    print(f\"Created directory: {output_folder}\")\n",
    "\n",
    "# 3. Read the input Excel file\n",
    "print(f\"Reading URLs from {input_file_path}...\")\n",
    "try:\n",
    "    df = pd.read_excel(input_file_path)\n",
    "    \n",
    "    successful_extractions = 0\n",
    "    failed_extractions = 0\n",
    "\n",
    "    # 4. Loop through each row of the DataFrame\n",
    "    for index, row in df.iterrows():\n",
    "        url_id = row['URL_ID']\n",
    "        url = row['URL']\n",
    "        \n",
    "        print(f\"Processing {url_id}: {url}\")\n",
    "        \n",
    "        success = extract_and_save_article(url, url_id, output_folder)\n",
    "        \n",
    "        if success:\n",
    "            successful_extractions += 1\n",
    "        else:\n",
    "            failed_extractions += 1\n",
    "            print(f\"-> Failed to extract article for URL_ID: {url_id}\")\n",
    "\n",
    "    print(\"\\n--- Data Extraction Complete ---\")\n",
    "    print(f\"Successfully saved: {successful_extractions} articles\")\n",
    "    print(f\"Failed to extract: {failed_extractions} articles\")\n",
    "\n",
    "except FileNotFoundError:\n",
    "    print(f\"Error: The input file was not found at the specified path: {input_file_path}\")\n",
    "except Exception as e:\n",
    "    print(f\"An unexpected error occurred: {e}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
